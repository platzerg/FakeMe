apply plugin: 'com.android.application'

android {
    compileSdkVersion 20
    buildToolsVersion '20.0.0'

    defaultConfig {
        applicationId 'platzerworld.com.biergarten'
        minSdkVersion 19
        targetSdkVersion 19
        versionCode 1
        versionName '1.0'
    }

    signingConfigs {
        release {
            storeFile file("/Users/platzerworld/platzerworld.jks")
            storePassword "*guenni*"
            keyAlias "platzerworld"
            keyPassword "*guenni*"
        }

        flavorproduction {
            storeFile file("/Users/platzerworld/platzerworld.jks")
            storePassword "*guenni*"
            keyAlias "platzerworld"
            keyPassword "*guenni*"
        }

        flavortesting {
            storeFile file("/Users/platzerworld/platzerworld.jks")
            storePassword "*guenni*"
            keyAlias "platzerworld"
            keyPassword "*guenni*"
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        //exclude 'META-INF/DEPENDENCIES'
        //exclude 'META-INF/NOTICE'
        //exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        //exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        lintConfig file("lint.xml")
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
    }

    productFlavors {
        production {
            applicationId "com.platzerworld.fakefb"
        }

        testing {
            applicationId "com.platzerworld.fakefb.testing"
        }
    }

    productFlavors {
        def flavorProduction = signingConfigs.flavorproduction
        def flavorTesting = signingConfigs.flavortesting
        production {
            applicationId "com.platzerworld.fakefb"
            signingConfig flavorProduction
        }


        testing {
            applicationId "com.platzerworld.fakefb.testing"
            signingConfig flavorTesting
        }
    }

    //useOldManifestMerger true
}


dependencies {
    compile project(':facebook')
    compile project(':twitter4J')
    compile project(':instagram')
    compile project(':foursquare')
    compile project(':flickr')
    compile project(':pinterest')
    compile project(':tumblr')
    compile project(':oauth2')


    compile 'com.google.android.gms:play-services:+'
    compile 'com.google.http-client:google-http-client-gson:1.17.0-rc' exclude module: 'httpclient'

    // not used begin
    compile 'com.google.http-client:google-http-client-android:1.18.0-rc'
    compile("com.google.oauth-client:google-oauth-client:1.18.0-rc") {
        exclude module: 'xpp3'
        exclude module: 'httpclient'
        exclude module: 'junit'
        exclude module: 'android'
    }
    // not used end


    compile 'com.fasterxml.jackson.core:jackson-core:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.1.4'

    //compile 'com.google.guava:guava:16.0.1'
    compile 'com.google.code.gson:gson:2.2.4'

    //compile 'com.jayway.android.robotium:robotium-solo:5.0.1'

    //androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.0.1'

    compile fileTree(dir: 'libs', include: ['*.jar'])
}
